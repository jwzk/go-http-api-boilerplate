// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/jwzk/go-http-api-boilerplate/internal/domain/model"
	mock "github.com/stretchr/testify/mock"
)

// MockBookDAO is an autogenerated mock type for the BookDAO type
type MockBookDAO struct {
	mock.Mock
}

type MockBookDAO_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBookDAO) EXPECT() *MockBookDAO_Expecter {
	return &MockBookDAO_Expecter{mock: &_m.Mock}
}

// CreateBook provides a mock function with given fields: ctx, book
func (_m *MockBookDAO) CreateBook(ctx context.Context, book model.Book) (model.Book, error) {
	ret := _m.Called(ctx, book)

	if len(ret) == 0 {
		panic("no return value specified for CreateBook")
	}

	var r0 model.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Book) (model.Book, error)); ok {
		return rf(ctx, book)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Book) model.Book); ok {
		r0 = rf(ctx, book)
	} else {
		r0 = ret.Get(0).(model.Book)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Book) error); ok {
		r1 = rf(ctx, book)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBookDAO_CreateBook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBook'
type MockBookDAO_CreateBook_Call struct {
	*mock.Call
}

// CreateBook is a helper method to define mock.On call
//   - ctx context.Context
//   - book model.Book
func (_e *MockBookDAO_Expecter) CreateBook(ctx interface{}, book interface{}) *MockBookDAO_CreateBook_Call {
	return &MockBookDAO_CreateBook_Call{Call: _e.mock.On("CreateBook", ctx, book)}
}

func (_c *MockBookDAO_CreateBook_Call) Run(run func(ctx context.Context, book model.Book)) *MockBookDAO_CreateBook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Book))
	})
	return _c
}

func (_c *MockBookDAO_CreateBook_Call) Return(_a0 model.Book, _a1 error) *MockBookDAO_CreateBook_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBookDAO_CreateBook_Call) RunAndReturn(run func(context.Context, model.Book) (model.Book, error)) *MockBookDAO_CreateBook_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBook provides a mock function with given fields: ctx, bookID
func (_m *MockBookDAO) DeleteBook(ctx context.Context, bookID model.BookID) error {
	ret := _m.Called(ctx, bookID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBook")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.BookID) error); ok {
		r0 = rf(ctx, bookID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBookDAO_DeleteBook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBook'
type MockBookDAO_DeleteBook_Call struct {
	*mock.Call
}

// DeleteBook is a helper method to define mock.On call
//   - ctx context.Context
//   - bookID model.BookID
func (_e *MockBookDAO_Expecter) DeleteBook(ctx interface{}, bookID interface{}) *MockBookDAO_DeleteBook_Call {
	return &MockBookDAO_DeleteBook_Call{Call: _e.mock.On("DeleteBook", ctx, bookID)}
}

func (_c *MockBookDAO_DeleteBook_Call) Run(run func(ctx context.Context, bookID model.BookID)) *MockBookDAO_DeleteBook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.BookID))
	})
	return _c
}

func (_c *MockBookDAO_DeleteBook_Call) Return(_a0 error) *MockBookDAO_DeleteBook_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBookDAO_DeleteBook_Call) RunAndReturn(run func(context.Context, model.BookID) error) *MockBookDAO_DeleteBook_Call {
	_c.Call.Return(run)
	return _c
}

// GetBook provides a mock function with given fields: ctx, bookID
func (_m *MockBookDAO) GetBook(ctx context.Context, bookID model.BookID) (model.Book, error) {
	ret := _m.Called(ctx, bookID)

	if len(ret) == 0 {
		panic("no return value specified for GetBook")
	}

	var r0 model.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.BookID) (model.Book, error)); ok {
		return rf(ctx, bookID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.BookID) model.Book); ok {
		r0 = rf(ctx, bookID)
	} else {
		r0 = ret.Get(0).(model.Book)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.BookID) error); ok {
		r1 = rf(ctx, bookID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBookDAO_GetBook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBook'
type MockBookDAO_GetBook_Call struct {
	*mock.Call
}

// GetBook is a helper method to define mock.On call
//   - ctx context.Context
//   - bookID model.BookID
func (_e *MockBookDAO_Expecter) GetBook(ctx interface{}, bookID interface{}) *MockBookDAO_GetBook_Call {
	return &MockBookDAO_GetBook_Call{Call: _e.mock.On("GetBook", ctx, bookID)}
}

func (_c *MockBookDAO_GetBook_Call) Run(run func(ctx context.Context, bookID model.BookID)) *MockBookDAO_GetBook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.BookID))
	})
	return _c
}

func (_c *MockBookDAO_GetBook_Call) Return(_a0 model.Book, _a1 error) *MockBookDAO_GetBook_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBookDAO_GetBook_Call) RunAndReturn(run func(context.Context, model.BookID) (model.Book, error)) *MockBookDAO_GetBook_Call {
	_c.Call.Return(run)
	return _c
}

// GetBooks provides a mock function with given fields: ctx
func (_m *MockBookDAO) GetBooks(ctx context.Context) ([]model.Book, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetBooks")
	}

	var r0 []model.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.Book, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.Book); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Book)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBookDAO_GetBooks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBooks'
type MockBookDAO_GetBooks_Call struct {
	*mock.Call
}

// GetBooks is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockBookDAO_Expecter) GetBooks(ctx interface{}) *MockBookDAO_GetBooks_Call {
	return &MockBookDAO_GetBooks_Call{Call: _e.mock.On("GetBooks", ctx)}
}

func (_c *MockBookDAO_GetBooks_Call) Run(run func(ctx context.Context)) *MockBookDAO_GetBooks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockBookDAO_GetBooks_Call) Return(_a0 []model.Book, _a1 error) *MockBookDAO_GetBooks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBookDAO_GetBooks_Call) RunAndReturn(run func(context.Context) ([]model.Book, error)) *MockBookDAO_GetBooks_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBook provides a mock function with given fields: ctx, book
func (_m *MockBookDAO) UpdateBook(ctx context.Context, book model.Book) (model.Book, error) {
	ret := _m.Called(ctx, book)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBook")
	}

	var r0 model.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Book) (model.Book, error)); ok {
		return rf(ctx, book)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Book) model.Book); ok {
		r0 = rf(ctx, book)
	} else {
		r0 = ret.Get(0).(model.Book)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Book) error); ok {
		r1 = rf(ctx, book)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBookDAO_UpdateBook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBook'
type MockBookDAO_UpdateBook_Call struct {
	*mock.Call
}

// UpdateBook is a helper method to define mock.On call
//   - ctx context.Context
//   - book model.Book
func (_e *MockBookDAO_Expecter) UpdateBook(ctx interface{}, book interface{}) *MockBookDAO_UpdateBook_Call {
	return &MockBookDAO_UpdateBook_Call{Call: _e.mock.On("UpdateBook", ctx, book)}
}

func (_c *MockBookDAO_UpdateBook_Call) Run(run func(ctx context.Context, book model.Book)) *MockBookDAO_UpdateBook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Book))
	})
	return _c
}

func (_c *MockBookDAO_UpdateBook_Call) Return(_a0 model.Book, _a1 error) *MockBookDAO_UpdateBook_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBookDAO_UpdateBook_Call) RunAndReturn(run func(context.Context, model.Book) (model.Book, error)) *MockBookDAO_UpdateBook_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBookDAO creates a new instance of MockBookDAO. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBookDAO(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBookDAO {
	mock := &MockBookDAO{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
